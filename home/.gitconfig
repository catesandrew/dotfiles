# TODO: source https://github.com/mathiasbynens/dotfiles/blob/master/.gitconfig
[core]
  excludesfile = ~/.gitignore-global
  quotepath = false
  autocrlf = input

  # Make `git rebase` safer on OS X
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

  # Prevent showing files whose names contain non-ASCII symbols as unversioned.
  # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
  precomposeunicode = false
[git-p4]
  user = andrew
  useclientspec = true
[alias]
  # ignored = !git ls-files -v | grep "^[[:lower:]]"
  hide = update-index --assume-unchanged
  unhide = update-index --no-assume-unchanged
  unhide-all = update-index --really-refresh
  hidden = !git ls-files -v | grep \"^[[:lower:]]\"
  ignored = !git status -s --ignored | grep \"^!!\"
  # To make it work in subdirectories and support arguments:
  # hidden = "!f(){ git -C \"$GIT_PREFIX\" ls-files -v \"$@\" | grep \"^[a-z]\";}; f"
  # ignored = "!f(){ git -C \"$GIT_PREFIX\" status -s --ignored \"$@\" | grep \"^!!\";}; f"
  pu = !"git fetch origin -v; git fetch upstream -v; git merge upstream/develop"
  fp = format-patch --stdout -1
  idiff = "!git diff | idiff"
  qlog = log --abbrev-commit --date=relative --pretty=format:'%C(bold yellow)%h%Creset %s %C(bold yellow)<%an>%Creset'
  # Short status output
  st = "!git status -sb"
  co = checkout
  lg = "log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative"
  # Quickly Commit / Uncommit Work-In-Progress
  # By David Gageot (http://gist.github.com/492227):
  wip = "git add -A; git ls-files --deleted -z | xargs -0 git rm; git commit -m \"wip\""
  unwip = "git log -n 1 | grep -q -c wip && git reset HEAD~1"
  # xargs
  nr = "!git ls-files -o --exclude-standard | xargs rm"
  # run command on modified files
  xr = "!f() { git status --short --untracked-files=no | cut -d' ' -f3 | xargs $1; }; f"
  # number of commits on branch.
  # 1 rev-list lists revisions, and
  # 2 master.. refers to "commits since current HEAD diverged from master"
  count = "!git rev-list develop.. | wc -l"
  #count2 = "!git log master..yourbranch --pretty=oneline | wc -l"
  #
  # Show branches, tags in git log
  dlog = "!git log --oneline --decorate"
  # Diff by highlighting inline word changes instead of whole lines
  wdiff = "!git diff --word-diff"

  # `git remote prune origin`: remove remote-tracking branches that were deleted from the remote repo
  # `git gc`: cleanup unnecessary files and optimize the local repository
  # `git clean -df`: remove untracked files and directories from the working tree
  # `git stash clear`: remove all stashed states
  trim = !git remote prune origin && git gc
  cleanup = !git clean -df && git stash clear

  # Add untracked, remove deleted, and show status
  adda = !git add -A && git status

  # Fetch a repository ($1) and checkout its ref ($2) HEAD
  # Use: `git browse https://github.com/necolas/dotfiles <commit-ish>`
  browse = !bash -c 'git fetch $1 ${2:-HEAD} && git checkout FETCH_HEAD' -

  # Diff what is staged for the next commit
  diffc = diff --cached
  # Diff overview
  diffst = diff --stat

  # Custom graph log (append any tree-ish)
  graph = log --pretty=nice --date-order --graph
  # Custom graph log for all branches
  grapha = log --pretty=nice --date-order --graph --all

  # Custom pretty log
  logp = log --pretty=nice --date-order

  # Diffstat log
  logst = log --stat
  # Short format diffstat log
  logsf = log --stat --format=oneline --abbrev-commit

  # Fetch and checkout a GitHub Pull Request from a remote (defaults to `origin`)
  # Use: `git gh-pr 123` or `git gh-pr 123 upstream`
  gh-pr = !bash -c 'git fetch -fu ${2:-origin} refs/pull/$1/head:gh-pr/$1 && git checkout gh-pr/$1' -

  first-sha = "!git rev-list --all        | tail -n 1"
  child-sha = "!git rev-list HEAD..master | tail -n 1"

  # Find out who is currently active on the repository
  # Displays committers in descending order of number of commits
  who = !shortlog --numbered --summary --email --no-merges --since="3 months"

  # Divergence (commits we added and commits remote added)
  div = divergence

  # Goodness (summary of diff lines added/removed/total)
  gn = goodness
  gnc = goodness --cached

  # Fancy logging.
  #   h = head
  #   hp = head with patch
  #   r = recent commits, only current branch
  #   ra = recent commits, all reachable refs
  #   l = all commits, only current branch
  #   la = all commits, all reachable refs
  head = !git r -1
  h = !git head
  hp = "!. ~/.githelpers && show_git_head"
  r = !GIT_NO_PAGER=1 git l -30
  ra = !git r --all
  l = "!. ~/.githelpers && pretty_git_log"
  la = !git l --all

  mtt   = mergetool -t

  # Show current `"user" <em@a.il>` configured
  user     = "! echo \"$(git config user.name) <$(git config user.email)> \""

  # me2 == "merge to" merge current branch to named one.
  # does 3 operations in one shot unless merge conflicts
  me2   = "!f() { git checkout $1 && git pull && git merge -; }; f "

  # codereview
  # http://gitready.com/advanced/2011/10/21/ribbon-and-catchup-reading-new-commits.html
  #
  # By the way: If you do not like to read the individual commits in topic branches that
  # were merged into origin/master, consider adding --first-parent -m to the catchup log command.
  ribbon = tag --force _ribbon origin/master
  catchup = log --patch --reverse --topo-order _ribbon..origin/master

  scrum = "!git ll --since='yesterday' --author=\"`git config user.name`\""

  dsf = "!f() { [ \"$GIT_PREFIX\" != \"\" ] && cd "$GIT_PREFIX"; git diff --color $@ | diff-so-fancy | less --tabs=2 -RFX; }; f"

  #  ticket = "!f() { git checkout -b `echo $1|tr 'A-Z' 'a-z'` origin/master }; f "
  #

[branch]
  autosetupmerge = true
  autosetuprebase = always
[difftool]
  prompt = false
[color]
  diff = auto
  status = auto
  branch = auto
  sh = auto
  ui = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  commit = green bold
  frag = magenta bold
  old = red bold
  new = green bold
  whitespace = red reverse
[color "diff-highlight"]
  oldNormal = red bold
  oldHighlight = "red bold 52"
  newNormal = "green bold"
  newHighlight = "green bold 22"
[color "status"]
  added = yellow
  changed = green
  untracked = cyan
[color "sh"]
  branch = yellow reverse
  workdir = blue bold
  dirty = red
[web]
  browser = open
[push]
  default = tracking
[branch "master"]
  rebase = true
[branch "main"]
  rebase = true
[mergetool]
  keepBackup = true
  prompt = false
[gitflow "prefix"]
  feature = feature/
  bugfix = bugfix/
  release = release/
  hotfix = hotfix/
  support = support/
  versiontag = v
[log]
  date = relative

# read from given uri
# push to writable one
# http://bit.ly/g9c9Y2

[url "http://github.com/"]
  insteadOf = "gh:"
  insteadOf = "gh://"
[url "git@github.com:"]
  pushInsteadOf = "https://github.com/"
  pushInsteadOf = "http://github.com/"
  pushInsteadOf = "gh:"
  pushInsteadOf = "gh://"
[url "https://gist.github.com/"]
  insteadOf = "gist:"
[url "git@gist.github.com:"]
  pushInsteadOf = "https://gist.github.com/"
  pushInsteadOf = "http://gist.github.com/"
  pushInsteadOf = "gist:"
[url "git@heroku.com:"]
  insteadOf = "heroku:"
[include]
  path = ~/.gitconfig-local
  path = ~/.gitconfig-private
[includeIf "gitdir:*/work/"]
  path = ~/.gitconfig-work
[magithub]
	online = false
[magithub "status"]
	includeStatusHeader = false
	includePullRequestsSection = false
	includeIssuesSection = false
[rerere]
	enabled = true
[http]
	postbuffer = 524288000
[credential]
	helper = cache --timeout=86400
